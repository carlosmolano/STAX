!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BackshiftOperator	../stax/transforms.py	/^class BackshiftOperator(TransformerMixin):$/;"	kind:class	line:8
BoxCoxTransform	../stax/transforms.py	/^class BoxCoxTransform(TransformerMixin):$/;"	kind:class	line:38
CNNRNN.py	../notebooks/CNNRNN.py	1;"	kind:file	line:1
D	../exploratory-analysis/fitting-timme-series.py	/^D=1$/;"	kind:variable	line:48
D	../notebooks/pyramida-arima.py	/^    D=1,$/;"	kind:variable	line:44
MAPE	../notebooks/pyramida-arima.py	/^MAPE = np.round($/;"	kind:variable	line:53
N	../notebooks/pyramida-arima.py	/^N = df.shape[0]$/;"	kind:variable	line:26
Ps	../exploratory-analysis/fitting-timme-series.py	/^Ps = range(0, 4)$/;"	kind:variable	line:46
Qs	../exploratory-analysis/fitting-timme-series.py	/^Qs = range(0, 4)$/;"	kind:variable	line:44
TimeSeries	../stax/__init__.py	/^class TimeSeries(object):$/;"	kind:class	line:18
__init__	../stax/__init__.py	/^    def __init__(self, series, frequency, train_test_split=0.9):$/;"	kind:member	line:19
__init__	../stax/transforms.py	/^    def __init__(self):$/;"	kind:member	line:15
__init__	../stax/transforms.py	/^    def __init__(self):$/;"	kind:member	line:45
__init__.py	../stax/__init__.py	1;"	kind:file	line:1
__main__.py	../stax/__main__.py	1;"	kind:file	line:1
app	../frontend/app.py	/^app = Flask(__name__)$/;"	kind:variable	line:12
app.py	../frontend/app.py	1;"	kind:file	line:1
args	../stax/__main__.py	/^    args = parser.parse_args()$/;"	kind:variable	line:35
best_aic	../exploratory-analysis/fitting-timme-series.py	/^best_aic = float("inf")$/;"	kind:variable	line:57
best_model	../wip.py	/^best_model = ts.trained_models["models"]["ExponentialSmoothing"]["model"].model$/;"	kind:variable	line:17
build_model	../notebooks/CNNRNN.py	/^def build_model(train, n_steps, n_length, n_input):$/;"	kind:function	line:76
create_dummy_data.py	../notebooks/create_dummy_data.py	1;"	kind:file	line:1
d	../exploratory-analysis/fitting-timme-series.py	/^d=1$/;"	kind:variable	line:49
d	../notebooks/pyramida-arima.py	/^    d=1,$/;"	kind:variable	line:43
data	../stax/__main__.py	/^    data = ts.trained_models$/;"	kind:variable	line:43
dataset	../notebooks/CNNRNN.py	/^dataset = read_csv('household_power_consumption_days.csv',$/;"	kind:variable	line:148
datasets	../frontend/app.py	/^def datasets():$/;"	kind:function	line:33
days	../notebooks/CNNRNN.py	/^days = ['sun', 'mon', 'tue', 'wed', 'thr', 'fri', 'sat']$/;"	kind:variable	line:163
df	../exploratory-analysis/fitting-timme-series.py	/^df = df[df.index > datetime(2018,1,1)]$/;"	kind:variable	line:24
df	../exploratory-analysis/fitting-timme-series.py	/^df = pd.read_csv("..\/data\/estimated-transaction-volume.csv")$/;"	kind:variable	line:21
df	../notebooks/create_dummy_data.py	/^df = df.dropna()$/;"	kind:variable	line:25
df	../notebooks/create_dummy_data.py	/^df = df.set_index("Date")$/;"	kind:variable	line:24
df	../notebooks/create_dummy_data.py	/^df = pd.read_csv('notebooks\/shampoo-sales.csv')$/;"	kind:variable	line:20
df	../notebooks/holtswinters.py	/^df = df.set_index(df.Date)[["Passengers"]]$/;"	kind:variable	line:22
df	../notebooks/holtswinters.py	/^df = pd.read_csv('airline-passengers.csv')$/;"	kind:variable	line:20
df	../notebooks/pyramida-arima.py	/^df = df.dropna()$/;"	kind:variable	line:24
df	../notebooks/pyramida-arima.py	/^df = df.set_index("Date")$/;"	kind:variable	line:23
df	../notebooks/pyramida-arima.py	/^df = pd.read_csv('shampoo-sales.csv')$/;"	kind:variable	line:20
df	../stax/__main__.py	/^    df = df.set_index("Date")$/;"	kind:variable	line:37
df	../stax/__main__.py	/^    df = pd.read_csv(args.table)$/;"	kind:variable	line:36
df	../wip.py	/^df = df.set_index("Date")$/;"	kind:variable	line:11
df	../wip.py	/^df = pd.read_csv('airline-passengers.csv')$/;"	kind:variable	line:10
error_action	../notebooks/pyramida-arima.py	/^    error_action='ignore',  # don't want to know if an order does not work$/;"	kind:variable	line:46
evaluate_forecasts	../notebooks/CNNRNN.py	/^def evaluate_forecasts(actual, predicted):$/;"	kind:function	line:28
evaluate_model	../notebooks/CNNRNN.py	/^def evaluate_model(train, test, n_steps, n_length, n_input):$/;"	kind:function	line:127
fit	../stax/transforms.py	/^    def fit(self, X, y=None):$/;"	kind:member	line:18
fit	../stax/transforms.py	/^    def fit(self, X, y=None):$/;"	kind:member	line:48
fit_transform	../stax/transforms.py	/^    def fit_transform(self, X, y=None):$/;"	kind:member	line:27
fit_transform	../stax/transforms.py	/^    def fit_transform(self, X, y=None):$/;"	kind:member	line:58
fitting-timme-series.py	../exploratory-analysis/fitting-timme-series.py	1;"	kind:file	line:1
forecast	../notebooks/CNNRNN.py	/^def forecast(model, history, n_steps, n_length, n_input):$/;"	kind:function	line:111
header	../notebooks/CNNRNN.py	/^                   header=0,$/;"	kind:variable	line:149
help	../stax/__main__.py	/^                        help='CSV file to process')$/;"	kind:variable	line:13
help	../stax/__main__.py	/^                        help='Columns to predict')$/;"	kind:variable	line:18
help	../stax/__main__.py	/^                        help='Destination for json file')$/;"	kind:variable	line:33
help	../stax/__main__.py	/^                        help='Frequency of seasonal trend')$/;"	kind:variable	line:23
help	../stax/__main__.py	/^                        help='Proportion of train data to test data')$/;"	kind:variable	line:28
holtswinters.py	../notebooks/holtswinters.py	1;"	kind:file	line:1
horizon	../notebooks/holtswinters.py	/^horizon = (len(test))$/;"	kind:variable	line:27
horizon	../notebooks/pyramida-arima.py	/^horizon = (len(test))$/;"	kind:variable	line:32
index	../frontend/app.py	/^def index():$/;"	kind:function	line:15
index	../notebooks/pyramida-arima.py	/^index = [i + index_1[-1] + 1 for i in range(len(pred))]$/;"	kind:variable	line:62
index_1	../notebooks/pyramida-arima.py	/^index_1 = range(len(train))$/;"	kind:variable	line:59
index_col	../notebooks/CNNRNN.py	/^                   index_col=['datetime'])$/;"	kind:variable	line:152
infer_datetime_format	../notebooks/CNNRNN.py	/^                   infer_datetime_format=True,$/;"	kind:variable	line:150
invboxcox	../exploratory-analysis/fitting-timme-series.py	/^def invboxcox(y,lmbda):$/;"	kind:function	line:86
inverse_transform	../stax/transforms.py	/^    def inverse_transform(self, X):$/;"	kind:member	line:33
inverse_transform	../stax/transforms.py	/^    def inverse_transform(self, X):$/;"	kind:member	line:64
j	../stax/__main__.py	/^    j = json.dumps(data, indent=4)$/;"	kind:variable	line:50
jobs	../frontend/app.py	/^def jobs():$/;"	kind:function	line:19
m	../notebooks/pyramida-arima.py	/^    m=4,$/;"	kind:variable	line:40
make_uuid	../frontend/app.py	/^def make_uuid():$/;"	kind:function	line:9
max_p	../notebooks/pyramida-arima.py	/^    max_p=3,$/;"	kind:variable	line:38
max_q	../notebooks/pyramida-arima.py	/^    max_q=3,$/;"	kind:variable	line:39
metavar	../stax/__main__.py	/^                        metavar='column',$/;"	kind:variable	line:16
metavar	../stax/__main__.py	/^                        metavar='frequency',$/;"	kind:variable	line:21
metavar	../stax/__main__.py	/^                        metavar='output',$/;"	kind:variable	line:31
metavar	../stax/__main__.py	/^                        metavar='table',$/;"	kind:variable	line:11
metavar	../stax/__main__.py	/^                        metavar='test_split',$/;"	kind:variable	line:26
model	../notebooks/holtswinters.py	/^        model = ExponentialSmoothing($/;"	kind:variable	line:39
models.py	../notebooks/models.py	1;"	kind:file	line:1
models.py	../stax/models.py	1;"	kind:file	line:1
n_input	../notebooks/CNNRNN.py	/^n_input = n_length * n_steps$/;"	kind:variable	line:158
parameter_space	../notebooks/holtswinters.py	/^parameter_space = {$/;"	kind:variable	line:29
parameters	../exploratory-analysis/fitting-timme-series.py	/^parameters = product(ps, qs, Ps, Qs)$/;"	kind:variable	line:51
parameters_list	../exploratory-analysis/fitting-timme-series.py	/^parameters_list = list(parameters)$/;"	kind:variable	line:52
parse_date	../exploratory-analysis/fitting-timme-series.py	/^def parse_date(date_string):$/;"	kind:function	line:17
parse_dates	../notebooks/CNNRNN.py	/^                   parse_dates=['datetime'],$/;"	kind:variable	line:151
parse_month	../notebooks/create_dummy_data.py	/^def parse_month(x):$/;"	kind:function	line:13
parse_month	../notebooks/pyramida-arima.py	/^def parse_month(x):$/;"	kind:function	line:13
parser	../stax/__main__.py	/^    parser = argparse.ArgumentParser(description='Run time series predictions')$/;"	kind:variable	line:9
pred	../exploratory-analysis/fitting-timme-series.py	/^pred = scaler.inverse_transform(predict.values.reshape(predict.shape[0],1))$/;"	kind:variable	line:94
pred	../notebooks/holtswinters.py	/^        pred = model.predict(start=test.index[0], end=test.index[-1])$/;"	kind:variable	line:45
pred_end	../wip.py	/^pred_end = datetime(1980, 1, 1)$/;"	kind:variable	line:30
pred_start	../wip.py	/^pred_start = ts.series.index[-1]$/;"	kind:variable	line:29
predict	../exploratory-analysis/fitting-timme-series.py	/^predict = (best_model.predict(test.index[0], test.index[-1]))$/;"	kind:variable	line:93
prediction_model	../wip.py	/^prediction_model = ExponentialSmoothing($/;"	kind:variable	line:22
preds	../notebooks/holtswinters.py	/^preds = []$/;"	kind:variable	line:35
ps	../exploratory-analysis/fitting-timme-series.py	/^ps = range(0, 4)$/;"	kind:variable	line:47
pyramida-arima.py	../notebooks/pyramida-arima.py	1;"	kind:file	line:1
qs	../exploratory-analysis/fitting-timme-series.py	/^qs = range(0, 4)$/;"	kind:variable	line:45
result_table	../exploratory-analysis/fitting-timme-series.py	/^result_table = pd.DataFrame(results)$/;"	kind:variable	line:81
results	../exploratory-analysis/fitting-timme-series.py	/^results = []$/;"	kind:variable	line:56
results	../frontend/app.py	/^def results():$/;"	kind:function	line:29
scaler	../exploratory-analysis/fitting-timme-series.py	/^scaler = MinMaxScaler(feature_range=(0,10))$/;"	kind:variable	line:26
seasonal	../notebooks/holtswinters.py	/^            seasonal=s,$/;"	kind:variable	line:42
seasonal	../notebooks/pyramida-arima.py	/^    seasonal=True,$/;"	kind:variable	line:42
seasonal	../wip.py	/^    seasonal=seasonal,$/;"	kind:variable	line:25
seasonal	../wip.py	/^seasonal = best_model.seasonal$/;"	kind:variable	line:19
seasonal_periods	../notebooks/holtswinters.py	/^            seasonal_periods=12,$/;"	kind:variable	line:43
seasonal_periods	../wip.py	/^    seasonal_periods=seasonal_periods,$/;"	kind:variable	line:26
seasonal_periods	../wip.py	/^seasonal_periods = best_model.seasonal_periods$/;"	kind:variable	line:20
series	../stax/__main__.py	/^    series = df[args.column]$/;"	kind:variable	line:39
series	../wip.py	/^series = df.Passengers$/;"	kind:variable	line:13
split_dataset	../notebooks/CNNRNN.py	/^def split_dataset(data):$/;"	kind:function	line:18
start	../notebooks/holtswinters.py	/^start = round(df.shape[0] * 0.7)$/;"	kind:variable	line:24
start	../notebooks/pyramida-arima.py	/^start = N - 12$/;"	kind:variable	line:27
start_P	../notebooks/pyramida-arima.py	/^    start_P=0,$/;"	kind:variable	line:41
start_p	../notebooks/pyramida-arima.py	/^    start_p=1,$/;"	kind:variable	line:36
start_q	../notebooks/pyramida-arima.py	/^    start_q=1,$/;"	kind:variable	line:37
stepwise	../notebooks/pyramida-arima.py	/^    stepwise=True,$/;"	kind:variable	line:48
stepwise_fit	../notebooks/pyramida-arima.py	/^stepwise_fit = pm.auto_arima($/;"	kind:variable	line:34
strftime	../stax/__init__.py	/^def strftime(datetime):$/;"	kind:function	line:14
summarize_scores	../notebooks/CNNRNN.py	/^def summarize_scores(name, score, scores):$/;"	kind:function	line:48
suppress_warnings	../notebooks/pyramida-arima.py	/^    suppress_warnings=True,  # don't want convergence warnings$/;"	kind:variable	line:47
te_end	../exploratory-analysis/fitting-timme-series.py	/^te_end = datetime(2019,3,1)$/;"	kind:variable	line:33
te_start	../exploratory-analysis/fitting-timme-series.py	/^te_start = tr_end $/;"	kind:variable	line:32
test	../exploratory-analysis/fitting-timme-series.py	/^test = df.loc[te_start:te_end]$/;"	kind:variable	line:37
test	../exploratory-analysis/fitting-timme-series.py	/^test = scaler.inverse_transform(test.values.reshape(test.shape[0],1))$/;"	kind:variable	line:95
test	../notebooks/holtswinters.py	/^test = df.Passengers.iloc[start - 1:]$/;"	kind:variable	line:26
test	../notebooks/pyramida-arima.py	/^test = df.Sales.values[start:]$/;"	kind:variable	line:30
to_supervised	../notebooks/CNNRNN.py	/^def to_supervised(train, n_input, n_out=7):$/;"	kind:function	line:54
tr_end	../exploratory-analysis/fitting-timme-series.py	/^tr_end = datetime(2019,2,1)$/;"	kind:variable	line:31
tr_start	../exploratory-analysis/fitting-timme-series.py	/^tr_start = datetime(2016,1,1)$/;"	kind:variable	line:30
trace	../notebooks/pyramida-arima.py	/^    trace=True,$/;"	kind:variable	line:45
train	../exploratory-analysis/fitting-timme-series.py	/^train = df.loc[tr_start:tr_end] $/;"	kind:variable	line:36
train	../notebooks/holtswinters.py	/^train = df.Passengers.iloc[0:start]$/;"	kind:variable	line:25
train	../notebooks/pyramida-arima.py	/^train = df.Sales.values[0:start]$/;"	kind:variable	line:29
train_arima	../stax/models.py	/^def train_arima(ts):$/;"	kind:function	line:13
train_expsmoothing	../stax/models.py	/^def train_expsmoothing(ts):$/;"	kind:function	line:42
train_models	../stax/__init__.py	/^    def train_models(self):$/;"	kind:member	line:58
transform	../stax/transforms.py	/^    def transform(self, X):$/;"	kind:member	line:24
transform	../stax/transforms.py	/^    def transform(self, X, y=None):$/;"	kind:member	line:54
transforms.py	../stax/transforms.py	1;"	kind:file	line:1
trend	../notebooks/holtswinters.py	/^            trend=t,$/;"	kind:variable	line:41
trend	../wip.py	/^    trend=trend,$/;"	kind:variable	line:24
trend	../wip.py	/^trend = best_model.trend$/;"	kind:variable	line:18
ts	../stax/__main__.py	/^    ts = TimeSeries(series, args.frequency, train_test_split=args.test_split)$/;"	kind:variable	line:40
ts	../wip.py	/^ts = TimeSeries(series, "monthly", train_test_split=0.8)$/;"	kind:variable	line:14
type	../stax/__main__.py	/^                        type=float,$/;"	kind:variable	line:27
type	../stax/__main__.py	/^                        type=str,$/;"	kind:variable	line:12
type	../stax/__main__.py	/^                        type=str,$/;"	kind:variable	line:17
type	../stax/__main__.py	/^                        type=str,$/;"	kind:variable	line:22
type	../stax/__main__.py	/^                        type=str,$/;"	kind:variable	line:32
verbose	../notebooks/pyramida-arima.py	/^    verbose=False)  # set to stepwise$/;"	kind:variable	line:49
wip.py	../wip.py	1;"	kind:file	line:1
